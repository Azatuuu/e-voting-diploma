import json
import subprocess

# –ü—É—Ç—å –∫ —Ç–≤–æ–µ–º—É –ø—Ä–æ–µ–∫—Ç—É Circom –≤ WSL
WSL_PROJECT_PATH = "/home/kali/circom_zkp_project"
WSL_INPUT_PATH = f"{WSL_PROJECT_PATH}/inputs.json"

# –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ –∫ node –∏ snarkjs
NODE_PATH = "/home/kali/.nvm/versions/node/v22.15.1/bin/node"
SNARKJS_PATH = "/home/kali/.nvm/versions/node/v22.15.1/bin/snarkjs"

def save_vote_to_inputs_json(vote: int):
    if vote not in [1, 2, 3]:
        raise ValueError("–ì–æ–ª–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1, 2 –∏–ª–∏ 3")

    with open("inputs.json", "w") as f:
        json.dump({"vote": vote}, f)
    print("‚úÖ inputs.json —Å–æ–∑–¥–∞–Ω.")

def copy_inputs_to_wsl():
    subprocess.run([
        "wsl",
        "cp",
        "/mnt/c/Users/Admin/Diploma/inputs.json",
        WSL_INPUT_PATH
    ], check=True)
    print("üì§ inputs.json —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ WSL.")

def generate_witness_in_wsl():
    cmd = (
        f"cd {WSL_PROJECT_PATH} && "
        f"{NODE_PATH} build/vote_js/generate_witness.js "
        f"build/vote_js/vote.wasm inputs.json build/witness.wtns"
    )
    subprocess.run(["wsl", "bash", "-c", cmd], check=True)
    print("üß© witness.wtns —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.")

def generate_proof_in_wsl():
    cmd = (
        f"cd {WSL_PROJECT_PATH} && "
        f"{NODE_PATH} {SNARKJS_PATH} groth16 prove "
        f"build/vote_0001.zkey build/witness.wtns proof.json public.json"
    )
    subprocess.run(["wsl", "bash", "-c", cmd], check=True)
    print("üìú –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")

def verify_proof_in_wsl() -> bool:
    cmd = (
        f"cd {WSL_PROJECT_PATH} && "
        f"{NODE_PATH} {SNARKJS_PATH} groth16 verify "
        f"build/verification_key.json public.json proof.json"
    )
    result = subprocess.run(["wsl", "bash", "-c", cmd], capture_output=True, text=True)
    print(result.stdout)
    return "OK" in result.stdout

def run_zkp_pipeline(vote: int) -> bool:
    print("=== ZKP Pipeline –∑–∞–ø—É—â–µ–Ω ===")
    save_vote_to_inputs_json(vote)
    copy_inputs_to_wsl()
    generate_witness_in_wsl()
    generate_proof_in_wsl()
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞...")
    return verify_proof_in_wsl()
